<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\VGA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\VGA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sat May 11 23:42:31 2024
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ANSI_FSM &rArr; CSI_Sequence &rArr; VGA_Putint &rArr;  VGA_Putint (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[54]">VGA_Putint</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">VGA_Putint</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from ps2.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from vga-min.o(.text.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1e]">SystemInit</a> from rcc.o(.text.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from vga-min.o(.text.TIM3_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from serial.o(.text.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[21]">VerticalBlank_CB</a> from ansi.o(.text.VerticalBlank_CB) referenced from ansi.o(.text.ANSI_Init)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">__main</a> from __main.o(!!!main) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[20]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[24]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[76]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[77]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[25]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[78]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[79]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[80]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[28]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[81]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[82]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[83]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[84]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[85]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[86]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[87]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[88]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[31]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[23]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[97]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[29]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ANSI_FSM &rArr; CSI_Sequence &rArr; VGA_Putint &rArr;  VGA_Putint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[30]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[32]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f030.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_RestorePosition
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_Init
</UL>

<P><STRONG><a name="[9c]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionDown
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionUp
</UL>

<P><STRONG><a name="[9e]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionDown
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionUp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToStart
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLine
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToEnd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreen
</UL>

<P><STRONG><a name="[3b]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[3a]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[9f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[a7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2f]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[33]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>ANSICursor_MoveTo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ansi.o(.text.ANSICursor_MoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ANSICursor_MoveTo &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[44]"></a>ANSI_FSM</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, ansi.o(.text.ANSI_FSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ANSI_FSM &rArr; CSI_Sequence &rArr; VGA_Putint &rArr;  VGA_Putint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>ANSI_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ansi.o(.text.ANSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ANSI_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>CSI_Sequence</STRONG> (Thumb, 724 bytes, Stack size 16 bytes, ansi.o(.text.CSI_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CSI_Sequence &rArr; VGA_Putint &rArr;  VGA_Putint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_PutStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_HorizontalAbsolute
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_PreviousLine
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_NextLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Right
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Left
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Down
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Up
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSICursor_MoveTo
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollDown
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionDown
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionUp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToStart
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLine
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToEnd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[46]"></a>ControlCode</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, ansi.o(.text.ControlCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ControlCode &rArr; VGA_Putch &rArr; ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_HorizontalAbsolute
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Left
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Down
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OriginRow
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[5a]"></a>Cursor_Disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ansi.o(.text.Cursor_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[4e]"></a>Cursor_Down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cursor_Down &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_NextLine
</UL>

<P><STRONG><a name="[57]"></a>Cursor_HorizontalAbsolute</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_HorizontalAbsolute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cursor_HorizontalAbsolute &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
</UL>

<P><STRONG><a name="[50]"></a>Cursor_Left</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_Left))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cursor_Left &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
</UL>

<P><STRONG><a name="[51]"></a>Cursor_NextLine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_NextLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cursor_NextLine &rArr; Cursor_Down &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Down
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[52]"></a>Cursor_PreviousLine</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_PreviousLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cursor_PreviousLine &rArr; Cursor_Up &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Up
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[6e]"></a>Cursor_Reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ansi.o(.text.Cursor_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionDown
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionUp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToStart
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLineToEnd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearLine
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreenToEnd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_ClearScreen
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>

<P><STRONG><a name="[5f]"></a>Cursor_RestorePosition</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_RestorePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Cursor_RestorePosition &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
</UL>

<P><STRONG><a name="[4f]"></a>Cursor_Right</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_Right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cursor_Right &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[74]"></a>Cursor_Task</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cursor_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Cursor_Up</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ansi.o(.text.Cursor_Up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Cursor_Up &rArr; PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OriginRow
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_PreviousLine
</UL>

<P><STRONG><a name="[68]"></a>Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vga-min.o(.text.Delay))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Send
</UL>

<P><STRONG><a name="[47]"></a>ESC_Sequence</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, ansi.o(.text.ESC_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ESC_Sequence &rArr; VGA_Puthex &rArr; VGA_Putch &rArr; ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Puthex
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_PutStr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_HorizontalAbsolute
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Down
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollDown
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_RestorePosition
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ps2.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_1_IRQHandler &rArr; FIFO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Parity
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FIFO_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo.o(.text.FIFO_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[64]"></a>FIFO_Read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fifo.o(.text.FIFO_Read))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>FIFO_ReadAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(.text.FIFO_ReadAvail))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>FIFO_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fifo.o(.text.FIFO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putchar
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>Getc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fifo.o(.text.Getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Getc
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
</UL>

<P><STRONG><a name="[5e]"></a>OriginRow</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ansi.o(.text.OriginRow))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Up
</UL>

<P><STRONG><a name="[65]"></a>PS2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ps2.o(.text.PS2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PS2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>PS2_Parity</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ps2.o(.text.PS2_Parity))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Send
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>PS2_Send</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ps2.o(.text.PS2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PS2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Parity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Update_LED
</UL>

<P><STRONG><a name="[69]"></a>PS2_Task</STRONG> (Thumb, 512 bytes, Stack size 16 bytes, ps2.o(.text.PS2_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PS2_Task &rArr; PS2_Update_LED &rArr; PS2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Update_LED
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Send
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lookup_Key
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutStr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>PS2_Update_LED</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ps2.o(.text.PS2_Update_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PS2_Update_LED &rArr; PS2_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vga-min.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PhysicalCursor_MoveTo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ansi.o(.text.PhysicalCursor_MoveTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PhysicalCursor_MoveTo
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_HorizontalAbsolute
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_PreviousLine
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_NextLine
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Right
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Left
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Down
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Up
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSICursor_MoveTo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_RestorePosition
</UL>

<P><STRONG><a name="[6d]"></a>PutStr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, serial.o(.text.PutStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PutStr &rArr; Putchar &rArr; FIFO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
</UL>

<P><STRONG><a name="[6c]"></a>Putchar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial.o(.text.Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Putchar &rArr; FIFO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutStr
</UL>

<P><STRONG><a name="[59]"></a>ScrollDown</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ansi.o(.text.ScrollDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ScrollDown &rArr; ScrollRegionDown &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionDown
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
</UL>

<P><STRONG><a name="[55]"></a>ScrollRegionDown</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ansi.o(.text.ScrollRegionDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ScrollRegionDown &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollDown
</UL>

<P><STRONG><a name="[56]"></a>ScrollRegionUp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ansi.o(.text.ScrollRegionUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
</UL>

<P><STRONG><a name="[58]"></a>ScrollUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ansi.o(.text.ScrollUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollRegionUp
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
</UL>

<P><STRONG><a name="[1e]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rcc.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, vga-min.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, serial.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; FIFO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USART_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, serial.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>VGA_ClearLine</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ansi.o(.text.VGA_ClearLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_ClearLine &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[4c]"></a>VGA_ClearLineToEnd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ansi.o(.text.VGA_ClearLineToEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_ClearLineToEnd &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[5d]"></a>VGA_ClearLineToStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ansi.o(.text.VGA_ClearLineToStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_ClearLineToStart &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[4a]"></a>VGA_ClearScreen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ansi.o(.text.VGA_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_ClearScreen &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_Init
</UL>

<P><STRONG><a name="[4b]"></a>VGA_ClearScreenToEnd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ansi.o(.text.VGA_ClearScreenToEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VGA_ClearScreenToEnd &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[5b]"></a>VGA_ClearScreenToStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ansi.o(.text.VGA_ClearScreenToStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_ClearScreenToStart &rArr; __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
</UL>

<P><STRONG><a name="[72]"></a>VGA_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, vga-min.o(.text.VGA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VGA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>VGA_PutStr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ansi.o(.text.VGA_PutStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VGA_PutStr &rArr; VGA_Putch &rArr; ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
</UL>

<P><STRONG><a name="[45]"></a>VGA_Putch</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ansi.o(.text.VGA_Putch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VGA_Putch &rArr; ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollUp
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhysicalCursor_MoveTo
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlCode
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Puthex
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_PutStr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
</UL>

<P><STRONG><a name="[60]"></a>VGA_Puthex</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ansi.o(.text.VGA_Puthex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VGA_Puthex &rArr; VGA_Putch &rArr; ScrollUp &rArr; ScrollRegionUp &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESC_Sequence
</UL>

<P><STRONG><a name="[54]"></a>VGA_Putint</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ansi.o(.text.VGA_Putint))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = VGA_Putint &rArr;  VGA_Putint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_Sequence
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Putint
</UL>

<P><STRONG><a name="[21]"></a>VerticalBlank_CB</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ansi.o(.text.VerticalBlank_CB))
<BR>[Address Reference Count : 1]<UL><LI> ansi.o(.text.ANSI_Init)
</UL>
<P><STRONG><a name="[2e]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, term.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; ANSI_FSM &rArr; CSI_Sequence &rArr; VGA_Putint &rArr;  VGA_Putint (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cursor_Task
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_FSM
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANSI_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_ReadAvail
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VGA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>Lookup_Key</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ps2.o(.text.Lookup_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lookup_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PS2_Task
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
